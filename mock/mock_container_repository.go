// Code generated by MockGen. DO NOT EDIT.
// Source: repository_layer/containerRepositoryInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	gomock "github.com/golang/mock/gomock"
)

// MockContainerRepositoryInterface is a mock of ContainerRepositoryInterface interface.
type MockContainerRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContainerRepositoryInterfaceMockRecorder
}

// MockContainerRepositoryInterfaceMockRecorder is the mock recorder for MockContainerRepositoryInterface.
type MockContainerRepositoryInterfaceMockRecorder struct {
	mock *MockContainerRepositoryInterface
}

// NewMockContainerRepositoryInterface creates a new mock instance.
func NewMockContainerRepositoryInterface(ctrl *gomock.Controller) *MockContainerRepositoryInterface {
	mock := &MockContainerRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockContainerRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerRepositoryInterface) EXPECT() *MockContainerRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContainerRepositoryInterface) Create(config *container.Config, hostConfig *container.HostConfig, name string) (container.ContainerCreateCreatedBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", config, hostConfig, name)
	ret0, _ := ret[0].(container.ContainerCreateCreatedBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContainerRepositoryInterfaceMockRecorder) Create(config, hostConfig, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContainerRepositoryInterface)(nil).Create), config, hostConfig, name)
}

// DeleteByID mocks base method.
func (m *MockContainerRepositoryInterface) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockContainerRepositoryInterfaceMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockContainerRepositoryInterface)(nil).DeleteByID), id)
}

// GetAllByLimit mocks base method.
func (m *MockContainerRepositoryInterface) GetAllByLimit(limit int) ([]types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByLimit", limit)
	ret0, _ := ret[0].([]types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByLimit indicates an expected call of GetAllByLimit.
func (mr *MockContainerRepositoryInterfaceMockRecorder) GetAllByLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByLimit", reflect.TypeOf((*MockContainerRepositoryInterface)(nil).GetAllByLimit), limit)
}

// GetByID mocks base method.
func (m *MockContainerRepositoryInterface) GetByID(id string) (types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContainerRepositoryInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContainerRepositoryInterface)(nil).GetByID), id)
}
