// Code generated by MockGen. DO NOT EDIT.
// Source: service_layer/containerServiceInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	gomock "github.com/golang/mock/gomock"
	dto "github.com/muhammedsaidkaya/crud-api--container--golang-docker-client/dto"
)

// MockContainerServiceInterface is a mock of ContainerServiceInterface interface.
type MockContainerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContainerServiceInterfaceMockRecorder
}

// MockContainerServiceInterfaceMockRecorder is the mock recorder for MockContainerServiceInterface.
type MockContainerServiceInterfaceMockRecorder struct {
	mock *MockContainerServiceInterface
}

// NewMockContainerServiceInterface creates a new mock instance.
func NewMockContainerServiceInterface(ctrl *gomock.Controller) *MockContainerServiceInterface {
	mock := &MockContainerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockContainerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerServiceInterface) EXPECT() *MockContainerServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContainerServiceInterface) Create(newContainerInput dto.ContainerInput) (container.ContainerCreateCreatedBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newContainerInput)
	ret0, _ := ret[0].(container.ContainerCreateCreatedBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContainerServiceInterfaceMockRecorder) Create(newContainerInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContainerServiceInterface)(nil).Create), newContainerInput)
}

// Delete mocks base method.
func (m *MockContainerServiceInterface) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContainerServiceInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContainerServiceInterface)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockContainerServiceInterface) GetAll(limit string) ([]types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", limit)
	ret0, _ := ret[0].([]types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockContainerServiceInterfaceMockRecorder) GetAll(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockContainerServiceInterface)(nil).GetAll), limit)
}

// GetByID mocks base method.
func (m *MockContainerServiceInterface) GetByID(id string) (types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContainerServiceInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContainerServiceInterface)(nil).GetByID), id)
}
